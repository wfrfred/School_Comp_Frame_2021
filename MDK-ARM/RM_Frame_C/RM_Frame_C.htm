<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\RM_Frame_C\RM_Frame_C.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\RM_Frame_C\RM_Frame_C.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Thu Nov  9 21:34:40 2023
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; CtrlHandle() &rArr; Servo::SetTargetAngle(float) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from lto-llvm-af9222.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">CAN1_RX0_IRQHandler</a> from lto-llvm-af9222.o(.text.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">CAN2_RX0_IRQHandler</a> from lto-llvm-af9222.o(.text.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">CDC_Control_FS</a> from lto-llvm-af9222.o(.text.CDC_Control_FS) referenced 2 times from lto-llvm-af9222.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[12]">CDC_DeInit_FS</a> from lto-llvm-af9222.o(.text.CDC_DeInit_FS) referenced 2 times from lto-llvm-af9222.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[11]">CDC_Init_FS</a> from lto-llvm-af9222.o(.text.CDC_Init_FS) referenced 2 times from lto-llvm-af9222.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[14]">CDC_Receive_FS</a> from lto-llvm-af9222.o(.text.CDC_Receive_FS) referenced 2 times from lto-llvm-af9222.o(.data.USBD_Interface_fops_FS)
 <LI><a href="#[6d]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream1_IRQHandler</a> from lto-llvm-af9222.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream2_IRQHandler</a> from lto-llvm-af9222.o(.text.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream7_IRQHandler</a> from lto-llvm-af9222.o(.text.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from lto-llvm-af9222.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from lto-llvm-af9222.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from lto-llvm-af9222.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from lto-llvm-af9222.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">MemManage_Handler</a> from lto-llvm-af9222.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from lto-llvm-af9222.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">OTG_FS_IRQHandler</a> from lto-llvm-af9222.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from lto-llvm-af9222.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from lto-llvm-af9222.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from lto-llvm-af9222.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from lto-llvm-af9222.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[21]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM1_UP_TIM10_IRQHandler</a> from lto-llvm-af9222.o(.text.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">UART_DMAAbortOnError</a> from lto-llvm-af9222.o(.text.UART_DMAAbortOnError) referenced 2 times from lto-llvm-af9222.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[44]">USART1_IRQHandler</a> from lto-llvm-af9222.o(.text.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">USART3_IRQHandler</a> from lto-llvm-af9222.o(.text.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">USART6_IRQHandler</a> from lto-llvm-af9222.o(.text.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">USBD_CDC_DataIn</a> from lto-llvm-af9222.o(.text.USBD_CDC_DataIn) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[c]">USBD_CDC_DataOut</a> from lto-llvm-af9222.o(.text.USBD_CDC_DataOut) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[8]">USBD_CDC_DeInit</a> from lto-llvm-af9222.o(.text.USBD_CDC_DeInit) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[a]">USBD_CDC_EP0_RxReady</a> from lto-llvm-af9222.o(.text.USBD_CDC_EP0_RxReady) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[10]">USBD_CDC_GetDeviceQualifierDescriptor</a> from lto-llvm-af9222.o(.text.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[e]">USBD_CDC_GetFSCfgDesc</a> from lto-llvm-af9222.o(.text.USBD_CDC_GetFSCfgDesc) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[d]">USBD_CDC_GetHSCfgDesc</a> from lto-llvm-af9222.o(.text.USBD_CDC_GetHSCfgDesc) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[f]">USBD_CDC_GetOtherSpeedCfgDesc</a> from lto-llvm-af9222.o(.text.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[7]">USBD_CDC_Init</a> from lto-llvm-af9222.o(.text.USBD_CDC_Init) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[9]">USBD_CDC_Setup</a> from lto-llvm-af9222.o(.text.USBD_CDC_Setup) referenced 2 times from lto-llvm-af9222.o(.data.USBD_CDC)
 <LI><a href="#[5]">USBD_FS_ConfigStrDescriptor</a> from lto-llvm-af9222.o(.text.USBD_FS_ConfigStrDescriptor) referenced 2 times from lto-llvm-af9222.o(.data.FS_Desc)
 <LI><a href="#[0]">USBD_FS_DeviceDescriptor</a> from lto-llvm-af9222.o(.text.USBD_FS_DeviceDescriptor) referenced 2 times from lto-llvm-af9222.o(.data.FS_Desc)
 <LI><a href="#[6]">USBD_FS_InterfaceStrDescriptor</a> from lto-llvm-af9222.o(.text.USBD_FS_InterfaceStrDescriptor) referenced 2 times from lto-llvm-af9222.o(.data.FS_Desc)
 <LI><a href="#[1]">USBD_FS_LangIDStrDescriptor</a> from lto-llvm-af9222.o(.text.USBD_FS_LangIDStrDescriptor) referenced 2 times from lto-llvm-af9222.o(.data.FS_Desc)
 <LI><a href="#[2]">USBD_FS_ManufacturerStrDescriptor</a> from lto-llvm-af9222.o(.text.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from lto-llvm-af9222.o(.data.FS_Desc)
 <LI><a href="#[3]">USBD_FS_ProductStrDescriptor</a> from lto-llvm-af9222.o(.text.USBD_FS_ProductStrDescriptor) referenced 2 times from lto-llvm-af9222.o(.data.FS_Desc)
 <LI><a href="#[4]">USBD_FS_SerialStrDescriptor</a> from lto-llvm-af9222.o(.text.USBD_FS_SerialStrDescriptor) referenced 2 times from lto-llvm-af9222.o(.data.FS_Desc)
 <LI><a href="#[1a]">UsageFault_Handler</a> from lto-llvm-af9222.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">_GLOBAL__sub_I_ChassisTask.cpp</a> from lto-llvm-af9222.o(.text._GLOBAL__sub_I_ChassisTask.cpp) referenced from lto-llvm-af9222.o(.init_array)
 <LI><a href="#[7b]">_GLOBAL__sub_I_UserTask.cpp</a> from lto-llvm-af9222.o(.text._GLOBAL__sub_I_UserTask.cpp) referenced from lto-llvm-af9222.o(.init_array)
 <LI><a href="#[76]">Motor::ErrorHandle()</a> from lto-llvm-af9222.o(.text._ZN5Motor11ErrorHandleEv) referenced from lto-llvm-af9222.o(.rodata._ZTV5Motor)
 <LI><a href="#[75]">Motor::Handle()</a> from lto-llvm-af9222.o(.text._ZN5Motor6HandleEv) referenced from lto-llvm-af9222.o(.rodata._ZTV5Motor)
 <LI><a href="#[74]">Motor::~Motor__sub_object()</a> from lto-llvm-af9222.o(.text._ZN5MotorD2Ev) referenced 2 times from lto-llvm-af9222.o(.text.__cxx_global_var_init)
 <LI><a href="#[74]">Motor::~Motor__sub_object()</a> from lto-llvm-af9222.o(.text._ZN5MotorD2Ev) referenced 2 times from lto-llvm-af9222.o(.text.__cxx_global_var_init.1)
 <LI><a href="#[74]">Motor::~Motor__sub_object()</a> from lto-llvm-af9222.o(.text._ZN5MotorD2Ev) referenced 2 times from lto-llvm-af9222.o(.text.__cxx_global_var_init.2)
 <LI><a href="#[74]">Motor::~Motor__sub_object()</a> from lto-llvm-af9222.o(.text._ZN5MotorD2Ev) referenced 2 times from lto-llvm-af9222.o(.text.__cxx_global_var_init.274)
 <LI><a href="#[74]">Motor::~Motor__sub_object()</a> from lto-llvm-af9222.o(.text._ZN5MotorD2Ev) referenced 2 times from lto-llvm-af9222.o(.text.__cxx_global_var_init.3)
 <LI><a href="#[78]">Servo::ErrorHandle()</a> from lto-llvm-af9222.o(.text._ZN5Servo11ErrorHandleEv) referenced from lto-llvm-af9222.o(.rodata._ZTV5Servo)
 <LI><a href="#[77]">Servo::Handle()</a> from lto-llvm-af9222.o(.text._ZN5Servo6HandleEv) referenced from lto-llvm-af9222.o(.rodata._ZTV5Servo)
 <LI><a href="#[79]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 2 times from lto-llvm-af9222.o(.rodata._ZTV6Device)
 <LI><a href="#[72]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[70]">main</a> from lto-llvm-af9222.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[92]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1bc]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7f]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1bd]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1be]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1bf]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[80]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1c0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.274
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_flash_read(flash_data_t*)
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Handle()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo__sub_object(SERVO_INIT_T*)
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Handle()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo__sub_object(SERVO_INIT_T*)
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1c4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[1c6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[81]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[8c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::SetTargetAngle(float)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handle()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Handle()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::stop()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo__sub_object(SERVO_INIT_T*)
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Handle()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo__sub_object(SERVO_INIT_T*)
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Handle()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo__sub_object(SERVO_INIT_T*)
</UL>

<P><STRONG><a name="[1cc]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Motor::IT_Handle(__CAN_HandleTypeDef*) &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Motor::IT_Handle(__CAN_HandleTypeDef*) &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; CtrlHandle() &rArr; Servo::SetTargetAngle(float) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART3_IRQHandler &rArr; RemoteControl::ITHandle() &rArr; RemoteControl::sbus_to_rc(unsigned char const volatile*)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::ITHandle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USART6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.rodata._ZTV6Device)
</UL>
<P><STRONG><a name="[1ae]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Init()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::init()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_flash_read(flash_data_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1b1]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[19e]"></a>__hardfp_log2</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, log2.o(i.__hardfp_log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)
</UL>

<P><STRONG><a name="[1b7]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1b5]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1b2]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1b4]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[1d0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1b3]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[93]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1b9]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
</UL>

<P><STRONG><a name="[1ba]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
</UL>

<P><STRONG><a name="[87]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15f]"></a>SystemClock_Config</STRONG> (Thumb, 190 bytes, Stack size 88 bytes, lto-llvm-af9222.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1700 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 612 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[148]"></a>MX_GPIO_Init</STRONG> (Thumb, 568 bytes, Stack size 96 bytes, lto-llvm-af9222.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 920 bytes, Stack size 28 bytes, lto-llvm-af9222.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[14f]"></a>MX_TIM1_Init</STRONG> (Thumb, 374 bytes, Stack size 96 bytes, lto-llvm-af9222.o(.text.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[151]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, lto-llvm-af9222.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[152]"></a>MX_TIM4_Init</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, lto-llvm-af9222.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>MX_TIM5_Init</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, lto-llvm-af9222.o(.text.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>MX_TIM8_Init</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, lto-llvm-af9222.o(.text.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>MX_TIM10_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM10_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 812 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 994 bytes, Stack size 40 bytes, lto-llvm-af9222.o(.text.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; Motor::IT_Handle(__CAN_HandleTypeDef*) &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 634 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; CtrlHandle() &rArr; Servo::SetTargetAngle(float) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1618 bytes, Stack size 48 bytes, lto-llvm-af9222.o(.text.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_MspInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[142]"></a>MX_ADC1_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>HAL_ADC_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 540 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[144]"></a>MX_ADC3_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, lto-llvm-af9222.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[155]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>HAL_UART_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[156]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>HAL_UART_MspInit</STRONG> (Thumb, 766 bytes, Stack size 80 bytes, lto-llvm-af9222.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_DMA_Init</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[147]"></a>MX_DMA_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>MX_CAN1_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>HAL_CAN_Init</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[146]"></a>MX_CAN2_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, lto-llvm-af9222.o(.text.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[14a]"></a>MX_I2C3_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_I2C_Init</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, lto-llvm-af9222.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[14c]"></a>MX_SPI1_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>HAL_SPI_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[14d]"></a>MX_SPI2_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 408 bytes, Stack size 72 bytes, lto-llvm-af9222.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[14b]"></a>MX_IWDG_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>HAL_IWDG_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[158]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>USBD_Init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[15a]"></a>USBD_RegisterClass</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[15b]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USBD_CDC_RegisterInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[15c]"></a>USBD_Start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[11]"></a>CDC_Init_FS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.CDC_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CDC_Init_FS &rArr; USBD_CDC_SetTxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[9a]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_CDC_SetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[9b]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USBD_CDC_SetRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_CDC_SetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[12]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[13]"></a>CDC_Control_FS</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.CDC_Control_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CDC_Control_FS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[14]"></a>CDC_Receive_FS</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.CDC_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CDC_Receive_FS &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_Interface_fops_FS)
</UL>
<P><STRONG><a name="[9c]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
</UL>

<P><STRONG><a name="[fd]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lto-llvm-af9222.o(.text.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[10a]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[d2]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[d3]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[d0]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[f7]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>USBD_LL_SOF</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[f5]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USBD_LL_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[104]"></a>USBD_LL_Reset</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[ef]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_SuspendCallback &rArr; USBD_LL_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>USBD_LL_Suspend</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_LL_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[ee]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_ResumeCallback &rArr; USBD_LL_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>USBD_LL_Resume</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_LL_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[f9]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback &rArr; USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[f8]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback &rArr; USBD_LL_IsoINIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USBD_LL_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[ce]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_ConnectCallback &rArr; USBD_LL_DevConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_LL_DevConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[d4]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[177]"></a>USBD_LL_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_PCD_Init</STRONG> (Thumb, 666 bytes, Stack size 96 bytes, lto-llvm-af9222.o(.text.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_PCD_Init &rArr; USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[17d]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[179]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_Get_USB_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[183]"></a>USBD_LL_Start</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[10b]"></a>HAL_PCD_Start</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[167]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[da]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[166]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[d6]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[170]"></a>USBD_LL_StallEP</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[df]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[178]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[d8]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[189]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[17e]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[107]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[164]"></a>USBD_LL_Transmit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataIn
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>

<P><STRONG><a name="[e2]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[168]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>

<P><STRONG><a name="[dc]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[165]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_GetRxDataSize &rArr; HAL_PCD_EP_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[17b]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_PCD_EP_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[0]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USBD_FS_DeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_DeviceDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[1]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USBD_FS_LangIDStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_FS_LangIDStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[2]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[172]"></a>USBD_GetString</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
</UL>

<P><STRONG><a name="[3]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[4]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[9f]"></a>Get_SerialNum</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[5]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[6]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.FS_Desc)
</UL>
<P><STRONG><a name="[a0]"></a>IntToUnicode</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[118]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 410 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1af]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[121]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::SetTargetAngle(float)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::stop()
</UL>

<P><STRONG><a name="[11f]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; CtrlHandle() &rArr; Servo::SetTargetAngle(float) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHandle()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisHandle()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::CANPackageSend()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ADC_vccMoni()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aRGB_led_change(unsigned int)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserHandle()
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[129]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[12a]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[12b]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[11a]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[11b]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[11c]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[11d]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a6]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aRGB_led_change(unsigned int)
</UL>

<P><STRONG><a name="[110]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c6]"></a>HAL_InitTick</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f3]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bf]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[be]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[bc]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[cd]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[ca]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[cb]"></a>NVIC_EncodePriority</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[cc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[c9]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[c8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[115]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[c4]"></a>HAL_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>HAL_Delay</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[a3]"></a>ADC_Init</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_ADC_Start</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ADC_vccMoni()
</UL>

<P><STRONG><a name="[19c]"></a>HAL_ADC_Stop</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ADC_vccMoni()
</UL>

<P><STRONG><a name="[a5]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ADC_vccMoni()
</UL>

<P><STRONG><a name="[19b]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_ADC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ADC_vccMoni()
</UL>

<P><STRONG><a name="[141]"></a>UART_SetConfig</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13a]"></a>UART_EndRxTransfer</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[162]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[139]"></a>UART_Receive_IT</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[13d]"></a>UART_Transmit_IT</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Init()
</UL>

<P><STRONG><a name="[b9]"></a>HAL_CAN_Start</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Init()
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::CANPackageSend()
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::IT_Handle(__CAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_CAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Init()
</UL>

<P><STRONG><a name="[a7]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox0CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox0AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox1CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox1AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox2CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox2AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo0FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; Motor::IT_Handle(__CAN_HandleTypeDef*) &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::IT_Handle(__CAN_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo1FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo1MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_SleepCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_SleepCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_WakeUpFromRxMsgCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_CAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.HAL_IWDG_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::ITHandle()
</UL>

<P><STRONG><a name="[fe]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USB_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[ff]"></a>USB_CoreInit</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, lto-llvm-af9222.o(.text.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[100]"></a>USB_SetCurrentMode</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[101]"></a>USB_DevInit</STRONG> (Thumb, 726 bytes, Stack size 104 bytes, lto-llvm-af9222.o(.text.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[102]"></a>USB_DevDisconnect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[10c]"></a>USB_DevConnect</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[10d]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USB_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[e4]"></a>USB_GetMode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USB_GetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>USB_ReadInterrupts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USB_ReadInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevAllOutEpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>PCD_EP_OutSetupPacket_int</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.PCD_EP_OutSetupPacket_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>USB_EP0_OutStart</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevAllInEpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, lto-llvm-af9222.o(.text.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.HAL_PCDEx_LPM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_LPM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>USB_FlushTxFifo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>USB_ActivateSetup</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USB_ActivateSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>USB_GetDevSpeed</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>USB_ReadPacket</STRONG> (Thumb, 76 bytes, Stack size 28 bytes, lto-llvm-af9222.o(.text.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>USB_WritePacket</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[108]"></a>USB_SetDevAddress</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USB_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[db]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[d7]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[dd]"></a>USB_EP0StartXfer</STRONG> (Thumb, 494 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>

<P><STRONG><a name="[de]"></a>USB_EPStartXfer</STRONG> (Thumb, 862 bytes, Stack size 40 bytes, lto-llvm-af9222.o(.text.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>

<P><STRONG><a name="[e0]"></a>USB_EPSetStall</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[d9]"></a>USB_EPClearStall</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[18a]"></a>USB_CoreReset</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[18b]"></a>USB_SetDevSpeed</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USB_SetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[18c]"></a>USB_FlushRxFifo</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[17a]"></a>USBD_RunTestMode</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_RunTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[186]"></a>USBD_SetClassConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[187]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[17f]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[180]"></a>USBD_StdDevReq</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[181]"></a>USBD_StdItfReq</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[182]"></a>USBD_StdEPReq</STRONG> (Thumb, 772 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[16e]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[16d]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[16f]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[171]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[174]"></a>USBD_GetDescriptor</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[184]"></a>USBD_SetAddress</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[185]"></a>USBD_SetConfig</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[173]"></a>USBD_GetConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[175]"></a>USBD_GetStatus</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[188]"></a>USBD_SetFeature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[16c]"></a>USBD_ClrFeature</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[16b]"></a>USBD_CtlError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[169]"></a>USBD_CtlSendData</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[176]"></a>USBD_GetLen</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.USBD_GetLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[16a]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[7]"></a>USBD_CDC_Init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[8]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[9]"></a>USBD_CDC_Setup</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[a]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[b]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text.USBD_CDC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_CDC_DataIn &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[c]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_DataOut &rArr; USBD_LL_GetRxDataSize &rArr; HAL_PCD_EP_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[d]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_CDC_GetHSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_CDC_GetHSCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[e]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_CDC_GetFSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_CDC_GetFSCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[f]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_CDC_GetOtherSpeedCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_CDC_GetOtherSpeedCfgDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[10]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text.USBD_CDC_GetDeviceQualifierDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_CDC_GetDeviceQualifierDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[7a]"></a>_GLOBAL__sub_I_ChassisTask.cpp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text._GLOBAL__sub_I_ChassisTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _GLOBAL__sub_I_ChassisTask.cpp &rArr; __cxx_global_var_init.3 &rArr; Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.init_array)
</UL>
<P><STRONG><a name="[18d]"></a>__cxx_global_var_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __cxx_global_var_init &rArr; Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ChassisTask.cpp
</UL>

<P><STRONG><a name="[18e]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __cxx_global_var_init.1 &rArr; Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ChassisTask.cpp
</UL>

<P><STRONG><a name="[18f]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __cxx_global_var_init.2 &rArr; Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ChassisTask.cpp
</UL>

<P><STRONG><a name="[190]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __cxx_global_var_init.3 &rArr; Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ChassisTask.cpp
</UL>

<P><STRONG><a name="[1a9]"></a>Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lto-llvm-af9222.o(.text._ZN5MotorC2EjP12MOTOR_INIT_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device__sub_object()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.274
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[74]"></a>Motor::~Motor__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text._ZN5MotorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::~Motor__sub_object()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lto-llvm-af9222.o(.text.__cxx_global_var_init)
<LI> lto-llvm-af9222.o(.text.__cxx_global_var_init.1)
<LI> lto-llvm-af9222.o(.text.__cxx_global_var_init.2)
<LI> lto-llvm-af9222.o(.text.__cxx_global_var_init.3)
<LI> lto-llvm-af9222.o(.text.__cxx_global_var_init.274)
</UL>
<P><STRONG><a name="[134]"></a>ChassisHandle()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text._Z13ChassisHandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ChassisHandle() &rArr; Motor::Handle() &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handle()
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[75]"></a>Motor::Handle()</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text._ZN5Motor6HandleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Motor::Handle() &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::IntensityCalc()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::MotorStateUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisHandle()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserHandle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.rodata._ZTV5Motor)
</UL>
<P><STRONG><a name="[193]"></a>ChassisStop()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text._Z11ChassisStopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ChassisStop() &rArr; Motor::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHandle()
</UL>

<P><STRONG><a name="[196]"></a>Motor::Stop()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text._ZN5Motor4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserStop()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStop()
</UL>

<P><STRONG><a name="[133]"></a>CtrlHandle()</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text._Z10CtrlHandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CtrlHandle() &rArr; Servo::SetTargetAngle(float) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::SetTargetAngle(float)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserStop()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisStop()
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[194]"></a>UserStop()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text._Z8UserStopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = UserStop() &rArr; Servo::stop() &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Stop()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHandle()
</UL>

<P><STRONG><a name="[195]"></a>Servo::SetTargetAngle(float)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text._ZN5Servo14SetTargetAngleEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Servo::SetTargetAngle(float) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlHandle()
</UL>

<P><STRONG><a name="[7b]"></a>_GLOBAL__sub_I_UserTask.cpp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text._GLOBAL__sub_I_UserTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _GLOBAL__sub_I_UserTask.cpp &rArr; __cxx_global_var_init.274 &rArr; Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1.275
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.274
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.init_array)
</UL>
<P><STRONG><a name="[191]"></a>__cxx_global_var_init.274</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text.__cxx_global_var_init.274))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __cxx_global_var_init.274 &rArr; Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UserTask.cpp
</UL>

<P><STRONG><a name="[192]"></a>__cxx_global_var_init.1.275</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text.__cxx_global_var_init.1.275))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = __cxx_global_var_init.1.275 &rArr; Servo::Servo__sub_object(SERVO_INIT_T*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo__sub_object(SERVO_INIT_T*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UserTask.cpp
</UL>

<P><STRONG><a name="[1ad]"></a>Servo::Servo__sub_object(SERVO_INIT_T*)</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, lto-llvm-af9222.o(.text._ZN5ServoC2EP12SERVO_INIT_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Servo::Servo__sub_object(SERVO_INIT_T*) &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Device__sub_object()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1.275
</UL>

<P><STRONG><a name="[19f]"></a>Servo::stop()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text._ZN5Servo4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Servo::stop() &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserStop()
</UL>

<P><STRONG><a name="[136]"></a>UserHandle()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-af9222.o(.text._Z10UserHandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = UserHandle() &rArr; Motor::Handle() &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handle()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Handle()
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[77]"></a>Servo::Handle()</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text._ZN5Servo6HandleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Servo::Handle() &rArr; std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserHandle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.rodata._ZTV5Servo)
</UL>
<P><STRONG><a name="[199]"></a>aRGB_led_show(unsigned int)</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text._Z13aRGB_led_showj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aRGB_led_show(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aRGB_led_change(unsigned int)
</UL>

<P><STRONG><a name="[131]"></a>aRGB_led_change(unsigned int)</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, lto-llvm-af9222.o(.text._Z15aRGB_led_changej))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = aRGB_led_change(unsigned int) &rArr; aRGB_led_show(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aRGB_led_show(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[132]"></a>bsp_ADC_vccMoni()</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text._Z15bsp_ADC_vccMoniv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_ADC_vccMoni() &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[197]"></a>bsp_flash_read(flash_data_t*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text._Z14bsp_flash_readP12flash_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_flash_read(flash_data_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>Motor::CANPackageSend()</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, lto-llvm-af9222.o(.text._ZN5Motor14CANPackageSendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Motor::CANPackageSend() &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1b0]"></a>RemoteControl::init()</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, lto-llvm-af9222.o(.text._ZN13RemoteControl4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>Motor::Init()</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, lto-llvm-af9222.o(.text._ZN5Motor4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor::Init() &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>Motor::MotorStateUpdate()</STRONG> (Thumb, 496 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text._ZN5Motor16MotorStateUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Motor::MotorStateUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handle()
</UL>

<P><STRONG><a name="[1a1]"></a>Motor::IntensityCalc()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lto-llvm-af9222.o(.text._ZN5Motor13IntensityCalcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Motor::IntensityCalc() &rArr; PID::PIDCalc(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PIDCalc(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handle()
</UL>

<P><STRONG><a name="[19d]"></a>std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text._Z4log2B6v16000IjENSt3__29enable_ifIXsr3std11is_integralIT_EE5valueEdE4typeES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = std::__2::enable_if&lang;std::is_integral&lang;unsigned int&rang;::value, double&rang;::type log2[abi:v16000]&lang;unsigned int&rang;(unsigned int) &rArr; __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::SetTargetAngle(float)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handle()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Handle()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::stop()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo__sub_object(SERVO_INIT_T*)
</UL>

<P><STRONG><a name="[76]"></a>Motor::ErrorHandle()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text._ZN5Motor11ErrorHandleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::ErrorHandle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.rodata._ZTV5Motor)
</UL>
<P><STRONG><a name="[1a2]"></a>PID::PIDCalc(float, float)</STRONG> (Thumb, 556 bytes, Stack size 12 bytes, lto-llvm-af9222.o(.text._ZN3PID7PIDCalcEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PID::PIDCalc(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::IntensityCalc()
</UL>

<P><STRONG><a name="[1aa]"></a>Device::Device__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text._ZN6DeviceC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Device::Device__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor__sub_object(unsigned int, MOTOR_INIT_t*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo::Servo__sub_object(SERVO_INIT_T*)
</UL>

<P><STRONG><a name="[b8]"></a>Motor::IT_Handle(__CAN_HandleTypeDef*)</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, lto-llvm-af9222.o(.text._ZN5Motor9IT_HandleEP19__CAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor::IT_Handle(__CAN_HandleTypeDef*) &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[78]"></a>Servo::ErrorHandle()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-af9222.o(.text._ZN5Servo11ErrorHandleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Servo::ErrorHandle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-af9222.o(.rodata._ZTV5Servo)
</UL>
<P><STRONG><a name="[1a0]"></a>RemoteControl::sbus_to_rc(unsigned char const volatile*)</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, lto-llvm-af9222.o(.text._ZN13RemoteControl10sbus_to_rcEPVKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RemoteControl::sbus_to_rc(unsigned char const volatile*)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::ITHandle()
</UL>

<P><STRONG><a name="[163]"></a>RemoteControl::ITHandle()</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, lto-llvm-af9222.o(.text._ZN13RemoteControl8ITHandleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RemoteControl::ITHandle() &rArr; RemoteControl::sbus_to_rc(unsigned char const volatile*)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::sbus_to_rc(unsigned char const volatile*)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
